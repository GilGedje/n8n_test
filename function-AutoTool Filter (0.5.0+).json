[{"id":"1bcd41cc-f730-44cb-9384-e21c8a033e06","userId":"6ddf0023-1d2a-4af3-bbbe-41612061a0d8","function":{"id":"autotool_filter","name":"AutoTool Filter (0.5.0+)","meta":{"description":"A filter that pre-processes a user query to match relevant tools and populates the request with matching tool IDs.","manifest":{"title":"AutoTool Filter","author":"open-webui","author_url":"https://github.com/open-webui","funding_url":"https://github.com/open-webui","version":"0.2.0","required_open_webui_version":"0.5.0"},"type":"filter"},"content":"\"\"\"\ntitle: AutoTool Filter\nauthor: open-webui\nauthor_url: https://github.com/open-webui\nfunding_url: https://github.com/open-webui\nversion: 0.2.0\nrequired_open_webui_version: 0.5.0\n\"\"\"\nfrom pydantic import BaseModel, Field\nfrom typing import Callable, Awaitable, Any, Optional, Literal\nimport json\nimport re\n\n# Updated imports\nfrom open_webui.models.users import Users\nfrom open_webui.models.tools import Tools\nfrom open_webui.models.models import Models\nfrom open_webui.utils.chat import generate_chat_completion  # Use the lightweight option\nfrom open_webui.utils.misc import get_last_user_message\n\nclass Filter:\n    class Valves(BaseModel):\n        template: str = Field(\n            default=\"\"\"Tools: {{TOOLS}}\nIf a tool doesn't match the query, return an empty list []. Otherwise, return a list of matching tool IDs in the format [\"tool_id\"]. Select multiple tools if applicable. Only return the list. Do not return any other text only the list. Review the entire chat history to ensure the selected tool matches the context. If unsure, default to an empty list []. Use tools conservatively.\"\"\"\n        )\n        status: bool = Field(default=False)\n        pass\n\n    def __init__(self):\n        self.valves = self.Valves()\n        pass\n\n    async def inlet(\n        self,\n        body: dict,\n        __event_emitter__: Callable[[Any], Awaitable[None]],\n        __request__: Any,  # New requirement in version 0.5\n        __user__: Optional[dict] = None,\n        __model__: Optional[dict] = None,\n    ) -> dict:\n        messages = body[\"messages\"]\n        user_message = get_last_user_message(messages)\n\n        if self.valves.status:\n            await __event_emitter__(\n                {\n                    \"type\": \"status\",\n                    \"data\": {\n                        \"description\": \"Finding the right tools...\",\n                        \"done\": False,\n                    },\n                }\n            )\n\n        all_tools = [\n            {\"id\": tool.id, \"description\": tool.meta.description}\n            for tool in Tools.get_tools()\n        ]\n        available_tool_ids = (\n            __model__.get(\"info\", {}).get(\"meta\", {}).get(\"toolIds\", [])\n        )\n        available_tools = [\n            tool for tool in all_tools if tool[\"id\"] in available_tool_ids\n        ]\n        system_prompt = self.valves.template.replace(\"{{TOOLS}}\", str(available_tools))\n        prompt = (\n            \"History:\\n\"\n            + \"\\n\".join(\n                [\n                    f\"{message['role'].upper()}: \\\"\\\"\\\"{message['content']}\\\"\\\"\\\"\"\n                    for message in messages[::-1][:4]\n                ]\n            )\n            + f\"\\nQuery: {user_message}\"\n        )\n        payload = {\n            \"model\": body[\"model\"],\n            \"messages\": [\n                {\"role\": \"system\", \"content\": system_prompt},\n                {\"role\": \"user\", \"content\": prompt},\n            ],\n            \"stream\": False,\n        }\n\n        try:\n            user = Users.get_user_by_id(__user__[\"id\"])\n            # Updated to use the direct successor function\n            response = await generate_chat_completion(\n                request=__request__, form_data=payload, user=user\n            )\n            content = response[\"choices\"][0][\"message\"][\"content\"]\n            # Parse the function response\n            if content is not None:\n                print(f\"content: {content}\")\n                content = content.replace(\"'\", '\"')\n                pattern = r\"\\[.*?\\]\"\n                match = re.search(pattern, content)\n                if match:\n                    content = str(match.group(0))\n                result = json.loads(content)\n                if isinstance(result, list) and len(result) > 0:\n                    body[\"tool_ids\"] = result\n                    if self.valves.status:\n                        await __event_emitter__(\n                            {\n                                \"type\": \"status\",\n                                \"data\": {\n                                    \"description\": f\"Found matching tools: {', '.join(result)}\",\n                                    \"done\": True,\n                                },\n                            }\n                        )\n                else:\n                    if self.valves.status:\n                        await __event_emitter__(\n                            {\n                                \"type\": \"status\",\n                                \"data\": {\n                                    \"description\": \"No matching tools found.\",\n                                    \"done\": True,\n                                },\n                            }\n                        )\n        except Exception as e:\n            print(e)\n            if self.valves.status:\n                await __event_emitter__(\n                    {\n                        \"type\": \"status\",\n                        \"data\": {\n                            \"description\": f\"Error processing request: {e}\",\n                            \"done\": True,\n                        },\n                    }\n                )\n            pass\n        return body"},"info":{},"downloads":6402,"upvotes":0,"downvotes":0,"updatedAt":1735434542,"createdAt":1719735233,"user":{"id":"6ddf0023-1d2a-4af3-bbbe-41612061a0d8","username":"hub","name":"Community","createdAt":1701489294,"role":"mod","verified":false}}]